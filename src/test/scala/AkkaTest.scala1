import Actors.PatientActor
import Actors.PatientActor.{ActionPerformed, AddPatient, DeletePatient, UpdatePatient}
import akka.actor.ActorSystem
import akka.testkit.{DefaultTimeout, ImplicitSender, TestKit}
import dao.PatientDAO
import model.{FullPatient, Patient}
import org.scalatest.{BeforeAndAfterAll, Matchers, WordSpecLike}

import scala.concurrent.duration._
import scala.util.{Failure, Success}
import akka.pattern.ask

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.{Await, Future}

class AkkaTest extends TestKit(ActorSystem())
  with DefaultTimeout
  with WordSpecLike {

    import PatientActor._

    val pActor = system.actorOf(PatientActor.props, "PatientActor")


    val patientDao = new PatientDAO()
    val testP = FullPatient("Ulzhan", "Ospan", "uljanek", "12345")
    "An ConnectionActor" should "delete patient " in {
                pActor ! DeletePatient(63)
                expectMsg(ActionPerformed("Deleted"))
//    }
//        val patient: Future[Patient] = (pActor ? AddPatient(testP)).mapTo[Patient]
//
//        println(patient)
//        Await.ready(patient, 10.seconds)
//        patient.onComplete {
//            case Success(value) => {
//                println("value")
//                value.patient_id match {
//                    case Some(id) => {
//                        println(id)
//

                        //                        "get patient by ID " in {
                        //                            within(500 millis) {
                        //                                pActor ! GetbyID(id)
                        //                                expectMsg(testP)
                        //                            }
                        //                        }
                        //                        "update patient " in {
                        //                            within(500 millis) {
                        //                                val oldP = patientDao.getPatient(id);
                        //
                        //                                pActor ! UpdatePatient(id, Patient(Some(id), "Dikosh", "Murzekenova", "dimur", "12345"))
                        //
                        //                                oldP.onComplete {
                        //                                    case Success(value) => {
                        //                                        pActor ! UpdatePatient(id, value.head)
                        //                                        expectMsg(ActionPerformed("Updated"))
                        //                                    }
                        //                                    case Failure(exception) => expectMsg(exception.getMessage)
                        //                                }
                        //
                        //                            }
                        //                        }

                    }
                    case _ => println("Matching is not correct")
                }

            }
            case Failure(exp) => println(s"Failure ${exp.getMessage}")
        }

}
