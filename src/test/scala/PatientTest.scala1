import org.scalatest._
import akka.http.scaladsl.model.{MessageEntity, StatusCodes}
import akka.http.scaladsl.testkit.ScalatestRouteTest
import akka.http.scaladsl.server._
import Directives._

import scala.concurrent.duration._
import akka.actor.{ActorRef, ActorSystem}
import akka.http.scaladsl.marshalling.Marshal
import akka.testkit.{DefaultTimeout, ImplicitSender, TestActors, TestKit}
import Actors.PatientActor
import dao.PatientDAO
import model.{FullPatient, Patient}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.{Await, Future}
import scala.util.{Failure, Success, Try}
import scala.concurrent.duration._

class PatientTest extends FunSuite {
    val patientDao = new PatientDAO()
    val testP = FullPatient("Ulzhan", "Ospan", "uljanek", "12345")
    val addPatient = patientDao.addPatient(testP)
    println(s"Future is ${addPatient}")
    val patient = Await.result(addPatient, 10.seconds)
    println(s" ID of patient ${patient.patient_id}")
    patient.patient_id match  {
        case Some(id) =>
        {

            test("Check id") {
                assert(id > 0, "ID must be equal")
            }
            test ("Check name") {
                assert(patient.name == testP.name, "Names must be equal")
            }

            test ("Check login") {
                assert(patient.login == testP.login, "Logins must be equal")
            }
            test ("Check surname") {
                assert(patient.surname == testP.surname, "Surnames must be equal")
            }
            test ("Check password") {
                assert(patient.password == testP.password, "passwords must be equal")
            }
            test ("Get patient") {
                val p = patientDao.getPatient(id)

                p.onComplete {
                    case Success(value: Seq[Patient]) => {
                        //println(value.head.equals(testP))
                        assert(value.head.equals(testP))
                    }
                    case Failure(exp) => println("Failure")
                }
            }
            test ("Update patient") {
                val updateAction : Future[Try[Int]] = patientDao.updatePatient(id, Patient(Some(id), "Kura", "Ospan", "asdf", "asdfg"))
                var ok = false
                updateAction.onComplete {
                    case Success(value) => {
                        value match {
                            case Success(int) => {
                                if (int > 0)
                                    ok = true
                                assert(ok)
                            }
                            case Failure(exp) => println("Failure")
                        }
                    }
                    case Failure(exception) => println("Failure")
                }
            }
            test ("Delete patient") {
                val deleteAction = patientDao.deletePatient(id)
                var ok = false
                deleteAction.onComplete {
                    case Success(value) => {
                        value match {
                            case Success( int ) => {
                                if (int > 0)
                                    ok = true
                                assert(ok)
                            }
                            case Failure(exp) => println("Failure")
                        }
                    }
                    case Failure(exp) => println("Failure")
                }
            }
        }

        case _ => test("Matching is not correct") {assert(false, "Id is not defined")}


    }
}

